package com.example.mastertref.data.local;

import androidx.lifecycle.LiveData;
import androidx.room.*;

import java.util.List;

@Dao
public interface TaikhoanDAO {
    // üü¢ Th√™m t√†i kho·∫£n m·ªõi (M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u)
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    void insertUser(TaikhoanEntity user);

    // üü¢ C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n (Kh√¥ng c·∫≠p nh·∫≠t m·∫≠t kh·∫©u ·ªü ƒë√¢y)
    @Update
    void updateUser(TaikhoanEntity user);

    // üü¢ X√≥a t√†i kho·∫£n
    @Delete
    void deleteUser(TaikhoanEntity user);

    // üü¢ X√≥a t√†i kho·∫£n theo username
    @Query("DELETE FROM taikhoan WHERE username = :username")
    void deleteByUsername(String username);

    // üü¢ Ki·ªÉm tra ƒëƒÉng nh·∫≠p (So s√°nh m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a)
    @Query("SELECT * FROM taikhoan WHERE email = :email AND password = :password LIMIT 1")
    TaikhoanEntity validLoginInfo(String email, String password);
    @Query("SELECT id FROM taikhoan WHERE username = :username LIMIT 1")
    int getUserIdByUsername(String username);
    // üü¢ L·∫•y t√†i kho·∫£n theo username
    @Query("SELECT * FROM taikhoan WHERE username = :username LIMIT 1")
    LiveData<TaikhoanEntity> getTaikhoanByUsername(String username);

    // üü¢ L·∫•y t√†i kho·∫£n theo email
    @Query("SELECT * FROM taikhoan WHERE email = :email LIMIT 1")
    TaikhoanEntity getUserByEmail(String email);

    // üü¢ Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    @Query("SELECT COUNT(*) FROM taikhoan WHERE email = :email")
    int isEmailExists(String email);

    // üü¢ L·∫•y t·∫•t c·∫£ t√†i kho·∫£n
    @Query("SELECT * FROM taikhoan")
    LiveData<List<TaikhoanEntity>> getAllTaikhoan();

    // üü¢ L·∫•y t√†i kho·∫£n theo ID
    @Query("SELECT * FROM taikhoan WHERE id = :userId LIMIT 1")
    TaikhoanEntity getUserById(int userId);

    // üü¢ X√°c th·ª±c m·∫≠t kh·∫©u c≈© tr∆∞·ªõc khi c·∫≠p nh·∫≠t (D√πng trong ch·ª©c nƒÉng ƒë·ªïi m·∫≠t kh·∫©u)
    @Query("SELECT * FROM taikhoan WHERE username = :username AND password = :password LIMIT 1")
    TaikhoanEntity verifyPassword(String username, String password);

    // üü¢ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi (L∆∞u √Ω: M·∫≠t kh·∫©u m·ªõi c·∫ßn ƒë∆∞·ª£c m√£ h√≥a tr∆∞·ªõc khi g·ªçi h√†m n√†y)
    @Query("UPDATE taikhoan SET password = :newPassword WHERE username = :username")
    void updatePassword(String username, String newPassword);

    // üîç T√¨m ki·∫øm t√†i kho·∫£n theo t√™n ho·∫∑c username, lo·∫°i tr·ª´ c√°c t√†i kho·∫£n ƒë√£ ch·∫∑n ho·∫∑c b·ªã ch·∫∑n
    @Query("SELECT * FROM taikhoan WHERE " +
           "(username LIKE '%' || :query || '%' OR fullname LIKE '%' || :query || '%') " +
           "AND id != :currentUserId " +
           "AND id NOT IN (" +
           "    SELECT blocked_id FROM chantaikhoan WHERE blocker_id = :currentUserId" +
           ") " +
           "AND id NOT IN (" +
           "    SELECT blocker_id FROM chantaikhoan WHERE blocked_id = :currentUserId" +
           ") " +
           "ORDER BY " +
           "CASE WHEN username = :query THEN 0 " +
           "     WHEN username LIKE :query || '%' THEN 1 " +
           "     WHEN username LIKE '%' || :query || '%' THEN 2 " +
           "     WHEN fullname = :query THEN 3 " +
           "     WHEN fullname LIKE :query || '%' THEN 4 " +
           "     ELSE 5 END")
    LiveData<List<TaikhoanEntity>> searchUsersByUsernameOrName(String query, int currentUserId);

    // üîç T√¨m ki·∫øm t√†i kho·∫£n theo t√™n ho·∫∑c username, s·∫Øp x·∫øp theo A-Z
    @Query("SELECT * FROM taikhoan WHERE " +
            "(username LIKE '%' || :query || '%' OR fullname LIKE '%' || :query || '%') " +
            "AND id != :currentUserId " +
            "AND id NOT IN (" +
            "    SELECT blocked_id FROM chantaikhoan WHERE blocker_id = :currentUserId" +
            ") " +
            "AND id NOT IN (" +
            "    SELECT blocker_id FROM chantaikhoan WHERE blocked_id = :currentUserId" +
            ") " +
            "ORDER BY fullname ASC, username ASC")
    LiveData<List<TaikhoanEntity>> searchUsersByUsernameOrNameAZ(String query, int currentUserId);

    // üîç T√¨m ki·∫øm t√†i kho·∫£n theo t√™n ho·∫∑c username, s·∫Øp x·∫øp theo Z-A
    @Query("SELECT * FROM taikhoan WHERE " +
            "(username LIKE '%' || :query || '%' OR fullname LIKE '%' || :query || '%') " +
            "AND id != :currentUserId " +
            "AND id NOT IN (" +
            "    SELECT blocked_id FROM chantaikhoan WHERE blocker_id = :currentUserId" +
            ") " +
            "AND id NOT IN (" +
            "    SELECT blocker_id FROM chantaikhoan WHERE blocked_id = :currentUserId" +
            ") " +
            "ORDER BY fullname DESC, username DESC")
    LiveData<List<TaikhoanEntity>> searchUsersByUsernameOrNameZA(String query, int currentUserId);

    // üîç Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã ch·∫∑n kh√¥ng
    @Query("SELECT COUNT(*) FROM chantaikhoan WHERE " +
            "(blocker_id = :currentUserId AND blocked_id = :targetUserId) OR " +
            "(blocker_id = :targetUserId AND blocked_id = :currentUserId)")
    int isUserBlockedOrBlocking(int currentUserId, int targetUserId);
}
